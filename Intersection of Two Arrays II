import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Solution {

    public static int[] intersect(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums1) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }

        List<Integer> list = new ArrayList<>();
        for (int num : nums2) {
            if (map.containsKey(num) && map.get(num) > 0) {
                list.add(num);
                map.put(num, map.get(num) - 1);
            }
        }

        int[] result = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            result[i] = list.get(i);
        }
        return result;
    }
}

-------------------------
Here is a Java solution that uses a HashMap to store the frequency of each element in nums1 and then iterates 
through nums2 to find the intersection of the two arrays has a time complexity of O(m + n), 
where m and n are the sizes of nums1 and nums2, respectively.

 you can call the intersect method and pass in the two arrays as arguments. 
