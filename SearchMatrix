class Solution {
   public boolean searchMatrix(int[][] matrix, int target) {
    if (matrix == null || matrix.length == 0) {
        return false;
    }

    int m = matrix.length;
    int n = matrix[0].length;

    int left = 0;
    int right = m * n - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        int midX = mid / n;
        int midY = mid % n;

        if (matrix[midX][midY] == target) {
            return true;
        }

        if (matrix[midX][midY] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return false;
}

}
--------------------------explaind.
This implementation starts by initializing left and right pointers to the start and end of the matrix,
respectively. Then, it uses a while loop to perform a binary search. In each iteration, 
it calculates the middle position of the current search range by dividing the number of columns by the middle index. Then,
it checks if the element at that position is equal to the target. If it is, the function returns true. If not, it checks whether the element 
is greater or less than the target and adjusts the left or right pointer accordingly.
If the while loop completes without finding the target, the function returns false.
